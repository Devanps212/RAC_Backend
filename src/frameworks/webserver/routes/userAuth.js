"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userAuthController_1 = __importDefault(require("../../../adapter/controllers/userAuthController"));
const userDbrepository_1 = require("../../../app/repositories/userDbrepository");
const userRepositoryMongo_1 = require("../../database/mongodb/repositories/userRepositoryMongo");
const userModel_1 = require("../../database/mongodb/models/userModel");
const authServices_1 = require("../../services/authServices");
const authServiceInterface_1 = require("../../../app/services/authServiceInterface");
const googleAuthServicesInterface_1 = require("../../../app/services/googleAuthServicesInterface");
const googleAuthServices_1 = require("../../services/googleAuthServices");
const multerService_1 = __importDefault(require("../../../app/services/multerService"));
const userAuthMiddleware_1 = require("../middlewares/userAuthMiddleware");
const userAuthentication = () => {
    const route = express_1.default.Router();
    const controller = (0, userAuthController_1.default)(authServices_1.authService, authServiceInterface_1.interfaceAuthService, userDbrepository_1.userdbRepository, userRepositoryMongo_1.userRepository, userModel_1.usersModel, googleAuthServices_1.googleAuthService, googleAuthServicesInterface_1.googleAuthInterface);
    route.post('/signup', controller.userSignup);
    route.post('/login', controller.userLogin);
    route.post('/VOTP', controller.otpGenerate);
    route.post('/Google-SignIn-Up', controller.signInUpWithGoogle);
    route.post('/location', controller.locationFinders);
    route.get('/findUser', userAuthMiddleware_1.UserAuthentication, controller.findSingleUser);
    route.post('/saveUser', userAuthMiddleware_1.UserAuthentication, multerService_1.default.fields([{ name: 'profilePic', maxCount: 1 }]), controller.upDateDetail);
    route.get('/getAll', controller.MongoAllUsers);
    route.get('/userEmail', controller.findUserBasedOnEmail);
    route.post('/resetPassword', controller.resetPassword);
    return route;
};
exports.default = userAuthentication;
